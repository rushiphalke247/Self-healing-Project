---
- name: Docker system recovery playbook
  hosts: localhost
  connection: local
  gather_facts: yes
  
  vars:
    cpu_threshold: 90
    memory_threshold: 80
    compose_file: /app/docker-compose.yml
    
  tasks:
    - name: Check current CPU usage
      shell: |
        if command -v top >/dev/null; then
          top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}'
        else
          docker exec nginx sh -c "cat /proc/loadavg | awk '{print \$1 * 100}'"
        fi
      register: cpu_usage
      
    - name: Check current memory usage
      shell: |
        if command -v free >/dev/null; then
          free | grep Mem | awk '{printf("%.1f"), $3/$2 * 100.0}'
        else
          docker stats --no-stream --format "table {{.MemPerc}}" | tail -n +2 | head -1 | sed 's/%//'
        fi
      register: memory_usage
      
    - name: Get Docker container resource usage
      shell: docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemPerc}}"
      register: docker_stats
      
    - name: Display resource usage
      debug:
        msg: |
          Current System Resources:
          CPU Usage: {{ cpu_usage.stdout }}%
          Memory Usage: {{ memory_usage.stdout }}%
          Docker Container Stats:
          {{ docker_stats.stdout }}
          
    - name: Identify high resource Docker containers
      shell: |
        docker stats --no-stream --format "{{.Container}} {{.CPUPerc}} {{.MemPerc}}" | 
        awk '$2+0 > 80 || $3+0 > 80 {print $1}'
      register: high_resource_containers
      
    - name: Restart high resource consuming containers
      docker_container:
        name: "{{ item }}"
        restart: yes
      loop: "{{ high_resource_containers.stdout_lines }}"
      when: high_resource_containers.stdout_lines | length > 0
      
    - name: Restart monitoring stack if resources are high
      shell: |
        cd "{{ compose_file | dirname }}"
        docker-compose restart nginx prometheus alertmanager
      when: 
        - cpu_usage.stdout | float > cpu_threshold or memory_usage.stdout | float > memory_threshold
      register: stack_restart_result
        
    - name: Clean up Docker system if memory usage is high
      shell: |
        docker system prune -f
        docker volume prune -f
        docker network prune -f
      when: memory_usage.stdout | float > memory_threshold
      register: docker_cleanup_result
      
    - name: Clear system caches if high memory usage (when available)
      shell: |
        sync
        echo 3 > /proc/sys/vm/drop_caches
      when: 
        - memory_usage.stdout | float > memory_threshold
        - ansible_system == "Linux"
      become: yes
      ignore_errors: yes
      
    - name: Check final container health
      shell: docker ps --filter "status=exited" --format "{{.Names}}"
      register: unhealthy_containers
      
    - name: Restart any exited containers
      shell: |
        cd "{{ compose_file | dirname }}"
        docker-compose up -d
      when: unhealthy_containers.stdout_lines | length > 0
      
    - name: Log system recovery action
      lineinfile:
        path: /var/log/self-healing.log
        line: "{{ ansible_date_time.iso8601 }} - Docker system recovery executed. CPU: {{ cpu_usage.stdout }}%, Memory: {{ memory_usage.stdout }}%, Containers restarted: {{ high_resource_containers.stdout_lines | length }}"
        create: yes
      become: yes
        
    - name: Send recovery notification
      debug:
        msg: |
          ðŸ”§ Docker System Recovery Completed:
          - CPU Usage: {{ cpu_usage.stdout }}%
          - Memory Usage: {{ memory_usage.stdout }}%
          - High Resource Containers: {{ high_resource_containers.stdout_lines | length }}
          - Docker Cleanup: {{ 'Performed' if docker_cleanup_result.changed else 'Not needed' }}
          - Stack Restart: {{ 'Performed' if stack_restart_result.changed else 'Not needed' }}
